// customers.component.ts
import { Component, OnInit } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { MatTableDataSource } from '@angular/material/table';
import { Customer } from './customer.model';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { AddCustomerFormDialogComponent } from './add-customer-form-dialog/add-customer-form-dialog.component';


import { MatSnackBar } from '@angular/material/snack-bar';
import { CustomerService } from 'src/app/services/customer.service';
import { CustomerUpdateService } from 'src/app/services/customer-update.service';
import { Router } from '@angular/router';

@Component({
  selector: 'app-customers',
  templateUrl: './customers.component.html',
  styleUrls: ['./customers.component.css'],
})
export class CustomersComponent implements OnInit {
  dataSource = new MatTableDataSource<Customer>();
  addCustomerForm: FormGroup;
  displayedColumns: string[] = ['customerId', 'customerName', 'contact', 'actions'];

  constructor(
    private snackBar: MatSnackBar,
    private fb: FormBuilder,
    private dialog: MatDialog,
    private customerService: CustomerService,
    private customerUpdateService: CustomerUpdateService,
    private router:Router
  ) {
    this.addCustomerForm = this.fb.group({
      customerName: ['', Validators.required],
      contact: ['', Validators.required],
    });
  }

  ngOnInit(): void {
    // this.customerService.getAllCustomers().subscribe((customers: Customer[]) => {
    //   this.dataSource.data = customers;
    // });
    

    // this.customerUpdateService.customerUpdated.subscribe(() => {
    //   this.customerService.getAllCustomers().subscribe((customers: Customer[]) => {
        
        
    //     this.dataSource.data = customers;
    //     console.log(this.dataSource.data);
    //   });
    // });

    this.customerService.getAllCustomers().subscribe((customers: Customer[]) => {
      this.dataSource.data = customers;
    });

    this.customerUpdateService.customerUpdated.subscribe(() => {
      this.customerService.getAllCustomers().subscribe((customers: Customer[]) => {
        this.dataSource.data = customers;
        console.log(this.dataSource.data);
      });
    });

  }

  saveCustomer(customer: Customer): void {
    this.customerService.updateCustomer(customer.customerId, customer).subscribe(
      (updatedCustomer: Customer) => {
        this.snackBar.open('Customer updated successfully', 'Dismiss', {
          duration: 3000,
        });
      },
      (error) => {
        console.error('Error updating customer:', error);
        this.snackBar.open('Error updating customer. Please try again.', 'Dismiss', {
          duration: 3000,
        });
      }
    );
  }
  openAddCustomerForm(): void {
    // Implement logic to open a dialog for adding a customer
    // Example: this.dialog.open(AddCustomerFormDialogComponent, { width: '400px' });
    const dialogRef = this.dialog.open(AddCustomerFormDialogComponent, {
      width: '400px',
    });

    dialogRef.afterClosed().subscribe((result) => {
      if (result) {
        // Add the new customer using your data service or API
        // Example: this.customerService.addCustomer(result).subscribe(...);
      }
    });
  }


  onSubmit(): void {
    if (this.addCustomerForm.valid) {
      const newCustomer: Customer = {
        customerId: this.addCustomerForm.value.customerId, // Auto-generated by the server
        customerName: this.addCustomerForm.value.customerName,
        contact: this.addCustomerForm.value.contact,
        editMode: false
      };

      this.customerService.createCustomer(newCustomer).subscribe((createdCustomer: Customer) => {
        this.dataSource.data = [...this.dataSource.data, createdCustomer];
        console.log(this.dataSource.data);
        
        this.addCustomerForm.reset();
        // // Trigger the customerUpdated event
        this.customerUpdateService.emitCustomerUpdate();
        this.router.navigate(['routes']);
      });
     
    }

    
  }

  deleteCustomer(customer: Customer): void {
    this.customerService.deleteCustomer(customer.customerId).subscribe(() => {
      const index = this.dataSource.data.findIndex((c) => c.customerId === customer.customerId);
      if (index !== -1) {
        this.dataSource.data.splice(index, 1);
        this.dataSource.data = [...this.dataSource.data];
      }
      this.snackBar.open('Customer deleted successfully', 'Dismiss', {
        duration: 3000,
      });
    });
  }

  editCustomer(customer: Customer): void {
    // Set the edit mode for the selected customer
    this.customerUpdateService.customerUpdated.subscribe(() => {
      this.customerService.getAllCustomers().subscribe((customers: Customer[]) => {
        
        
        this.dataSource.data = customers;
        console.log(this.dataSource.data);
      });
    });
    console.log(this.dataSource.data);
    customer.editMode = true;
  }
}
